"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[436],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,b=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(b,i(i({ref:t},p),{},{components:n})):r.createElement(b,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9093:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],c={sidebar_position:3},l="Interacting With Objects",s={unversionedId:"S3/interacting-with-objects",id:"S3/interacting-with-objects",isDocsHomePage:!1,title:"Interacting With Objects",description:"All methods described here support additional optional headers that can be included in the request. Please refer to the S3 Documentation for more information on what headers can be applied to different methods.",source:"@site/../docs-builder/target/mdoc/S3/interacting-with-objects.md",sourceDirName:"S3",slug:"/S3/interacting-with-objects",permalink:"/fawn/docs/S3/interacting-with-objects",editUrl:"https://github.com/meltwater/fawn/edit/main/docs/../docs-builder/target/mdoc/S3/interacting-with-objects.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Interacting with Buckets",permalink:"/fawn/docs/S3/interacting-with-buckets"},next:{title:"Making a Client",permalink:"/fawn/docs/S3/making-a-client"}},p=[],d={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"interacting-with-objects"},"Interacting With Objects"),(0,a.kt)("p",null,"All methods described here support additional optional headers that can be included in the request. Please refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonS3/latest/API/API_Operations_Amazon_Simple_Storage_Service.html"},"S3 Documentation")," for more information on what headers can be applied to different methods. "),(0,a.kt)("p",null,"To list all objects in a bucket, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"listObjectsV2")," method. This makes use of the V2 version of the action in S3."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'//Print an objects name (key) and ETag.\ndef printObject(s3Object: S3Object): IO[Unit] = IO {\n    println(s"S3Object Name: ${s3Object.key},  S3Object ETag: ${s3Object.eTag}")\n}\n\ns3.listObjectsV2("hello-world-bucket-example").flatMap { response =>\n    response.contents.traverse(printObject _)\n}\n// res0: IO[Vector[Unit]] = IO$160512655\n')),(0,a.kt)("p",null,"To upload a file into a bucket as an object, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"putObject")," method. This method requires an ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityEncoder[F, T]")," for what you intend to upload. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import org.http4s.EntityEncoder\n\nimplicit val encoder: EntityEncoder[IO, String] = EntityEncoder.stringEncoder\n// encoder: EntityEncoder[IO, String] = org.http4s.EntityEncoder$$anon$3@1759ded5\n  \nval body = "testing-file-body"\n// body: String = testing-file-body\n\ns3.putObject("hello-world-bucket-example", "example-file.txt", body)\n// res1: IO[UploadFileResponse] = IO$1918268563\n')),(0,a.kt)("p",null,"To download an object from a bucket, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"getObject")," method. In order to decode the contents of the file, an ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityDecoder[F, T]")," must be provided."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import org.http4s.EntityDecoder\n\nimplicit val decoder: EntityDecoder[IO, String] = EntityDecoder.text\n// decoder: EntityDecoder[IO, String] = org.http4s.EntityDecoder$$anon$7@3f3f238\n\n//Download the object then print it\'s decoded contents. \ns3.getObject("hello-world-bucket-example", "example-file.txt").flatMap { response =>\n    IO { println(response.body) }\n}\n// res2: IO[Unit] = IO$53929355\n')),(0,a.kt)("p",null,"An object can be deleted using the ",(0,a.kt)("inlineCode",{parentName:"p"},"deleteObject")," method. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'s3.deleteObject("hello-world-bucket-example", "example-file.txt")\n// res3: IO[org.http4s.Headers] = IO$1522547790\n')),(0,a.kt)("p",null,"An object can be copied using ",(0,a.kt)("inlineCode",{parentName:"p"},"copyObject"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'s3.copyObject("hello-world-bucket-example", "new-example-file.txt","example-file.txt")\n// res4: IO[CopyObjectResponse] = IO$468920681\n')),(0,a.kt)("p",null,"To obtain the metadata of an object in the form of headers, ",(0,a.kt)("inlineCode",{parentName:"p"},"headObject")," can be used. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'//Print the object\'s ETag\ns3.headObject("hello-world-bucket-example", "example-file.txt").flatMap { response =>\n    IO { println(response.eTag) }\n}\n// res5: IO[Unit] = IO$126708253\n')))}u.isMDXComponent=!0}}]);