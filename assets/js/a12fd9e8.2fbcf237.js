"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[498],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return h}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),s=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(a),h=n,m=c["".concat(i,".").concat(h)]||c[h]||u[h]||o;return a?r.createElement(m,l(l({ref:t},d),{},{components:a})):r.createElement(m,l({ref:t},d))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=c;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:n,l[1]=p;for(var s=2;s<o;s++)l[s]=a[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1440:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return p},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return d},default:function(){return c}});var r=a(7462),n=a(3366),o=(a(7294),a(3905)),l=["components"],p={sidebar_position:4},i="Multipart Uploads",s={unversionedId:"S3/multipart-uploads",id:"S3/multipart-uploads",title:"Multipart Uploads",description:"Multipart Uploads can be accomplished one of two ways, using either the raw request methods or using the higher-level method startMultipartUpload. Using the low-level request methods requires the handling of the uploadId of the upload and the ETags of the uploaded parts. The higher level method produces a Resource[F, MultipartUpload] which can be used.",source:"@site/../docs-builder/target/mdoc/S3/multipart-uploads.md",sourceDirName:"S3",slug:"/S3/multipart-uploads",permalink:"/fawn/docs/S3/multipart-uploads",editUrl:"https://github.com/meltwater/fawn/edit/main/docs/../docs-builder/target/mdoc/S3/multipart-uploads.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Interacting With Objects",permalink:"/fawn/docs/S3/interacting-with-objects"},next:{title:"Roadmap",permalink:"/fawn/docs/roadmap"}},d=[{value:"Multipart Uploads Requests",id:"multipart-uploads-requests",children:[],level:2},{value:"Higher-Level Multipart Upload Method",id:"higher-level-multipart-upload-method",children:[],level:2}],u={toc:d};function c(e){var t=e.components,a=(0,n.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"multipart-uploads"},"Multipart Uploads"),(0,o.kt)("p",null,"Multipart Uploads can be accomplished one of two ways, using either the raw request methods or using the higher-level method ",(0,o.kt)("inlineCode",{parentName:"p"},"startMultipartUpload"),". Using the low-level request methods requires the handling of the ",(0,o.kt)("inlineCode",{parentName:"p"},"uploadId")," of the upload and the ",(0,o.kt)("inlineCode",{parentName:"p"},"ETags")," of the uploaded parts. The higher level method produces a ",(0,o.kt)("inlineCode",{parentName:"p"},"Resource[F, MultipartUpload]")," which can be used."),(0,o.kt)("h2",{id:"multipart-uploads-requests"},"Multipart Uploads Requests"),(0,o.kt)("p",null,"Multipart uploads can be accomplished by using the raw requests to S3. These can be used in cases where a large file is required to be uploaded and should be seperated into smaller parts for upload. It is important to note that a file should be seperated into parts of at minumum of 5 MB in size, the final part is an exception to this however."),(0,o.kt)("p",null,"All methods described here support additional optional headers that can be included in the request. Please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonS3/latest/API/API_Operations_Amazon_Simple_Storage_Service.html"},"S3 Documentation")," for more information on what headers can be applied to different methods."),(0,o.kt)("p",null,"A multipart upload begins by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"createMultipartUpload")," method. This method produces the ",(0,o.kt)("inlineCode",{parentName:"p"},"uploadId")," which is needed by other requests."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'s3.createMultipartUpload("hello-world-bucket-example", "mp-file-example").flatMap { response =>\n    IO { println(s"UploadID: ${response.uploadId}") }\n}\n// res0: IO[Unit] = IO$551448852\n')),(0,o.kt)("p",null,"If, for any reason, the multipart upload is needed to be cancelled, this can be done with the ",(0,o.kt)("inlineCode",{parentName:"p"},"abortMultipartUpload")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'s3.abortMultipartUpload(\n        "hello-world-bucket-example",\n        "mp-file-example",\n        uploadId = "943465sdf54sdf654sd321fdf")\n// res1: IO[org.http4s.Headers] = IO$766173839\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"listMultipartUploads")," method can be used to see ongoing uploads within a bucket. This also obtains the ",(0,o.kt)("inlineCode",{parentName:"p"},"uploadId")," for each upload."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'def printMP(upload: Uploads): IO[Unit] = IO { println(s"UploadID: ${upload.uploadId}") }\n\ns3.listMultipartUploads("hello-world-bucket-example").flatMap { response =>\n    response.uploads.get.traverse(printMP _)\n}\n// res2: IO[Vector[Unit]] = IO$1347867045\n')),(0,o.kt)("p",null,"A list of parts uploaded so far in a multipart upload can be obtained using the ",(0,o.kt)("inlineCode",{parentName:"p"},"listParts")," method. This returns each part's ",(0,o.kt)("inlineCode",{parentName:"p"},"ETag")," which is necessary for completing the upload."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'def printPart(part: Parts): IO[Unit] = IO { println(s"Part Etag: ${part.eTag}") }\n\ns3.listParts(\n    "hello-world-bucket-example",\n    "mp-file-example",\n    uploadId = "943465sdf54sdf654sd321fdf")\n    .flatMap { response => response.parts.traverse(printPart _) }\n// res3: IO[Vector[Unit]] = IO$1895583351\n')),(0,o.kt)("p",null,"To upload a part, the ",(0,o.kt)("inlineCode",{parentName:"p"},"uploadPart")," method is to be used. This requires an ",(0,o.kt)("inlineCode",{parentName:"p"},"EntityEncoder")," in order to encode the contents of the chunk. It also requires a part number which is necessary for reassembling the parts into the completed file. In S3, part numbers are indexed from 1 to 10,000. This also returns the ",(0,o.kt)("inlineCode",{parentName:"p"},"ETag")," of the part, which is also necessary for completing the upload."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'s3.uploadPart(\n    "hello-world-bucket-example",\n    "mp-file-example",\n    1,\n    "943465sdf54sdf654sd321fdf",\n    "content-to -be-encoded")\n    .flatMap { response => IO { println(s"Part ETag: ${response.eTag}") } }\n// res4: IO[Unit] = IO$595187629\n')),(0,o.kt)("p",null,"Once all parts are uploaded, the upload can be completed. This is done using the method ",(0,o.kt)("inlineCode",{parentName:"p"},"completeMultipartUpload")," method. This method requires all ",(0,o.kt)("inlineCode",{parentName:"p"},"ETags")," for each part in a list, in order of assembly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'s3.completeMultipartUpload(\n        "hello-world-bucket-example",\n        "mp-file-example",\n        uploadId = "943465sdf54sdf654sd321fdf",\n        parts = List("9320f0j32f0j23f0j382jf", "9320f0j32f0mg59khf32jf"))\n// res5: IO[CompleteMultipartUploadResponse] = IO$1497233367\n')),(0,o.kt)("h2",{id:"higher-level-multipart-upload-method"},"Higher-Level Multipart Upload Method"),(0,o.kt)("p",null,"To use the higher-level multipart upload, first invoke the ",(0,o.kt)("inlineCode",{parentName:"p"},"startMultipartUpload")," method. This returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"Resource[F, MultipartUpload]"),"."),(0,o.kt)("p",null,"This ",(0,o.kt)("inlineCode",{parentName:"p"},"Resource")," includes the ",(0,o.kt)("inlineCode",{parentName:"p"},"sendPart")," method which is used to send a file chunk. The Resource automatically keeps track of returned ",(0,o.kt)("inlineCode",{parentName:"p"},"ETags")," and generates part numbers upon uploading another part. Upon the release of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Resource"),", the multipart upload is completed automatically. Parts sent to upload must be sent in the order that should be reassembled. If the ",(0,o.kt)("inlineCode",{parentName:"p"},"Resource")," is cancelled or an error occurs, the multipart upload is aborted."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import org.http4s.EntityEncoder\n\n//For docs purposes, send a singular part t.\ndef upload[T](t: T)(implicit enc: EntityEncoder[IO, T]) =\n    s3.startMultipartUpload("bucket", "key").use { mp => mp.sendPart(t) }\n')))}c.isMDXComponent=!0}}]);