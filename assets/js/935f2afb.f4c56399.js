"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/fawn/docs/intro","docId":"intro"},{"type":"link","label":"Modules","href":"/fawn/docs/module-overview","docId":"module-overview"},{"type":"category","label":"Codecs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Intro","href":"/fawn/docs/codecs/intro","docId":"codecs/intro"},{"type":"link","label":"FawnEncoder","href":"/fawn/docs/codecs/encoder","docId":"codecs/encoder"},{"type":"link","label":"FawnDecoder","href":"/fawn/docs/codecs/decoder","docId":"codecs/decoder"}]},{"type":"category","label":"SQS","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Making a Client","href":"/fawn/docs/SQS/making-a-client","docId":"SQS/making-a-client"},{"type":"link","label":"Sending Data","href":"/fawn/docs/SQS/sending-data","docId":"SQS/sending-data"},{"type":"link","label":"Receiving Data","href":"/fawn/docs/SQS/receiving-data","docId":"SQS/receiving-data"}]},{"type":"category","label":"S3","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Making a Client","href":"/fawn/docs/S3/making-a-client","docId":"S3/making-a-client"},{"type":"link","label":"Interacting with Buckets","href":"/fawn/docs/S3/interacting-with-buckets","docId":"S3/interacting-with-buckets"},{"type":"link","label":"Interacting With Objects","href":"/fawn/docs/S3/interacting-with-objects","docId":"S3/interacting-with-objects"},{"type":"link","label":"Multipart Uploads","href":"/fawn/docs/S3/multipart-uploads","docId":"S3/multipart-uploads"}]},{"type":"link","label":"Roadmap","href":"/fawn/docs/roadmap","docId":"roadmap"}]},"docs":{"codecs/decoder":{"id":"codecs/decoder","title":"FawnDecoder","description":"Similar to circe Decoder again, this time we allow decoding to fail with a Throwable, and there is an extra emap method to help combining.","sidebar":"tutorialSidebar"},"codecs/encoder":{"id":"codecs/encoder","title":"FawnEncoder","description":"Much like the circe Encoder interface, this assumes encoding cannot fail, and since SQS usually deals in strings, we expect a string output.","sidebar":"tutorialSidebar"},"codecs/intro":{"id":"codecs/intro","title":"Intro","description":"Fawn includes a module called codec which contains interfaces used for encoding and decoding.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Fawn is a modular set of functional libraries to access Amazon AWS.","sidebar":"tutorialSidebar"},"module-overview":{"id":"module-overview","title":"Modules","description":"Fawn is split into modules so you can just depend on the ones you need.","sidebar":"tutorialSidebar"},"roadmap":{"id":"roadmap","title":"Roadmap","description":"Initial Release","sidebar":"tutorialSidebar"},"S3/interacting-with-buckets":{"id":"S3/interacting-with-buckets","title":"Interacting with Buckets","description":"To create a bucket we can use the createBucket method. For this method and all others here, please refer to the S3 Documentation for additional optional headers than can be included in the method.","sidebar":"tutorialSidebar"},"S3/interacting-with-objects":{"id":"S3/interacting-with-objects","title":"Interacting With Objects","description":"All methods described here support additional optional headers that can be included in the request. Please refer to the S3 Documentation for more information on what headers can be applied to different methods.","sidebar":"tutorialSidebar"},"S3/making-a-client":{"id":"S3/making-a-client","title":"Making a Client","description":"To start with S3, we want to make an instance of S3 to represent all the interactions we can make with S3.","sidebar":"tutorialSidebar"},"S3/multipart-uploads":{"id":"S3/multipart-uploads","title":"Multipart Uploads","description":"Multipart Uploads can be accomplished one of two ways, using either the raw request methods or using the higher-level method startMultipartUpload. Using the low-level request methods requires the handling of the uploadId of the upload and the ETags of the uploaded parts. The higher level method produces a Resource[F, MultipartUpload] which can be used.","sidebar":"tutorialSidebar"},"SQS/making-a-client":{"id":"SQS/making-a-client","title":"Making a Client","description":"To start off with SQS, we want to make an instance of SQSQueue to represent all the things we can do to a queue.","sidebar":"tutorialSidebar"},"SQS/receiving-data":{"id":"SQS/receiving-data","title":"Receiving Data","description":"Handling Decoding Yourself","sidebar":"tutorialSidebar"},"SQS/sending-data":{"id":"SQS/sending-data","title":"Sending Data","description":"To send data we can use the low level method to just send a string:","sidebar":"tutorialSidebar"}}}')}}]);